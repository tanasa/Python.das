#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
The initial versions of the code portions below were generated by GPT-4o 
or Gemini 2.0. These were then corrected, assembled, and tested by BT.
"""

import os
import random
import string
import time
import argparse

# The number of patients to generate the data for is read as an argument.

# number_patients = 1_000_000
# number_patients = 10_000_000
# number_patients = 100_000_000
# number_patients = 1_000_000_000
# 2 mil, 3 mil, 4 mil, 5 mil, 6 mil, 7 mil, 8 mil, 10 mil, 100 mil etc..

parser = argparse.ArgumentParser(description="Read the number of patients from the command line")
parser.add_argument("--number_patients", type=int, required=True, help="The number of patients")
args = parser.parse_args()
number_patients = args.number_patients
print(f"The number of patients is: {number_patients}")

# Read the file with the names of the diseases

working_directory = "/home/tanasa/Desktop/DSA_asymptotic_analysis"
input_file_diseases = os.path.join(working_directory, "list_diseases.txt")
output_file_diseases = os.path.join(working_directory, f"test_patients_diseases_{number_patients}.txt")
time_log_file = os.path.join(working_directory, f"test_patients_diseases_time_log_{number_patients}.txt")

# Functions to generate random patient names, treatment costs, and outstanding balances

def generateRandomName(maxNameLength=10):
    # Generate a random name with a length between 3 and max_length
    nameLength = random.randint(3, maxNameLength)  # Choose a random length for the name
    name = ''.join(random.choices(string.ascii_letters, k=nameLength))  # Create a name of that length
    return name

def generateDiseaseSeverity():
    # Randomly assign a severity level
    diseaseSeverity = {"mild", "moderate", "severe", "critical"}
    return random.choice(tuple(diseaseSeverity))

def generateTreatmentCost():
    # Generate a random treatment cost between 1 and 1,000,000
    return random.randint(1, 1_000_000)

def generateOutstandingBalance():
    # Generate a random outstanding balance between 1 and 1,000,000
    return random.randint(1, 1_000_000)

# Generate a file with the patient First Name, Last Name, Diagnosis, 
# Disease Severity, Treatment Cost, and Outstanding Balance.

if os.path.exists(input_file_diseases):
    
    start_time = time.time()  # Start the timer
 
    with open(input_file_diseases, "r") as file:
        diseases = [line.strip() for line in file]

    if not diseases:
        print("The input file is empty.")
    else:
        print("List of Diseases Loaded.")
        print("Total Number of Diseases:", len(diseases))

        # Generate the data for a number of patients

        with open(output_file_diseases, "w") as output_file:
            # Write the header row
            output_file.write("firstName\tlastName\tdiagnosis\tseverity\ttreatmentCost\toutstandingBalance\n")
            
            for _ in range(number_patients):
                first_name = generateRandomName()
                last_name = generateRandomName()
                random_disease = random.choice(diseases)
                severity = generateDiseaseSeverity()
                treatment_cost = generateTreatmentCost()
                outstanding_balance = generateOutstandingBalance()
                output_file.write(f"{first_name}\t{last_name}\t{random_disease}\t{severity}\t{treatment_cost}\t{outstanding_balance}\n")
                
            end_time = time.time()  # End the timer
            elapsed_time = end_time - start_time  # Calculate elapsed time
            
            # Log the time to a separate file
            with open(time_log_file, "w") as log_time:
                 log_time.write(f"Time taken to generate file with {number_patients} entries: {elapsed_time:.2f} seconds\n")

        print(f"Generated file with {number_patients} entries at: {output_file_diseases}")
        print(f"Time taken  to generate the file : {elapsed_time:.2f} seconds. Logged in {time_log_file}")
else:
    print(f"File not found: {input_file_diseases}")
    
    